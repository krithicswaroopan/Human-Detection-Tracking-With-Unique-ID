# -*- coding: utf-8 -*-
"""format_cnv.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nKpQTmBIGuvB8ob5tc4Ac4UqOhCKQcDo
"""

import os
from os import walk, getcwd
from PIL import Image

def convert(size, box):
    dw = 1./size[0]
    dh = 1./size[1]
    x = (box[0] + box[1])/2.0
    y = (box[2] + box[3])/2.0
    w = box[1] - box[0]
    h = box[3] - box[2]
    x = x*dw
    w = w*dw
    y = y*dh
    h = h*dh
    return (x,y,w,h)
    
    
"""-------------------------------------------------------------------""" 

""" Configure Paths"""   
mypath = "Annotations/"
outpath = "result/"
json_backup ="json_backup/"

wd = getcwd()
#list_file = open('%s_list.txt'%(wd), 'w')

""" Get input json file list """
json_name_list = []
for file in os.listdir(mypath):
    if file.endswith(".txt"):
        json_name_list.append(file)
    

""" Process """
for json_name in json_name_list:
    txt_name = json_name.rstrip(".jpg.txt") + ".txt"
    """ Open input text files """
    txt_path = mypath + json_name
    print("Input:" + txt_path)
    txt_file = open(txt_path, "r")
    
    """ Open output text files """
    txt_outpath = outpath + txt_name
    print("Output:" + txt_outpath)
    txt_outfile = open(txt_outpath, "a")
    
    lines = txt_file.readlines()
    del(lines[0])
    for idx in range(len(lines)):
        cls,x1,y1,x2,y2 = map(str,lines[idx].split(sep =" "))
        #cls = int(cls)
        x1 = int(x1)
        x2 = int(x2)
        y1 = int(y1)
        y2 = int(y2)
        
        xmin = min(x1,x2)
        xmax = max(x1,x2)
        ymin = min(y1,y2)
        ymax = max(y1,y2)
        img_path = str('%s/Annotations/%s'%(wd, os.path.splitext(json_name)[0]))
        

        im=Image.open(img_path)
        w= int(im.size[0])
        h= int(im.size[1])

        #print(w, h)
        #print(xmin, xmax, ymin, ymax)
        #print(type(xmin))
        b = (xmin, xmax, ymin, ymax)
        bb = convert((w,h), b)
        #print(bb)
        txt_outfile.write(cls + " " + " ".join([str(a) for a in bb]) + '\n')

print(lines)
del(lines[0])
print("Done")

txt = open('train.txt','r')
lines = txt.readlines()
tr_annot=[]
for i in lines:
    i = i + '.txt'
    tr_annot.append(i.replace("\n",""))

tr_img=[]
for i in tr_annot:
    tr_img.append(i.replace(".txt",'.jpg'))

txt = open('val.txt','r')
lines = txt.readlines()
val_annot=[]
for i in lines:
    i = i + '.txt'
    val_annot.append(i.replace("\n",""))

val_img=[]
for i in val_annot:
    val_img.append(i.replace(".txt",'.jpg'))

import shutil

source_folder = r"Images/"
destination_folder = r"dataset/train/images/"
# iterate files
for file in tr_img:
    # construct full file path
    source = source_folder + file
    destination = destination_folder + file
    # move file
    shutil.copy(source, destination)
    
print('Moved:', file)

import shutil

source_folder = r"result/"
destination_folder = r"dataset/train/labels/"

# iterate files
for file in tr_annot:
    # construct full file path
    source = source_folder + file
    destination = destination_folder + file
    # move file
    shutil.copy(source, destination)
    print('Moved:', file)

import shutil

source_folder = r"Images/"
destination_folder = r"dataset/val/images/"

# iterate files
for file in val_img:
    # construct full file path
    source = source_folder + file
    destination = destination_folder + file
    # move file
    shutil.copy(source, destination)
    print('Moved:', file)

import shutil

source_folder = r"result/"
destination_folder = r"dataset/val/labels/"

# iterate files
for file in val_annot:
    # construct full file path
    source = source_folder + file
    destination = destination_folder + file
    # move file
    shutil.copy(source, destination)
    print('Moved:', file)

txt = open('test.txt','r')
lines = txt.readlines()
ts_img=[]
for i in lines:
    i = i + '.jpg'
    ts_img.append(i.replace("\n",""))

import shutil

source_folder = r"Images/"
destination_folder = r"dataset/test/"

# iterate files
for file in ts_img:
    # construct full file path
    source = source_folder + file
    destination = destination_folder + file
    # move file
    shutil.copy(source, destination)
    print('Moved:', file)

